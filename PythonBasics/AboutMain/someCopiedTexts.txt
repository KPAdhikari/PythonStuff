   
 https://www.geeksforgeeks.org/__name__-special-variable-python/

##############    __name__ (A Special variable) in Python   #############

    Since there is no main() function in Python, when the command to run a python program is given to the interpreter, the code that is at level 0 indentation is to be executed. However, before doing that, it will define a few special variables. __name__ is one such special variable. If the source file is executed as the main program, the interpreter sets the __name__ variable to have a value “__main__”. If this file is being imported from another module, __name__ will be set to the module’s name.
__name__ is a built-in variable which evaluates to the name of the current module. Thus it can be used to check whether the current script is being run on its own or being imported somewhere else by combining it with if statement, as shown below.

    Consider two separate files File1 and File2.


# File1.py 
  
print "File1 __name__ = %s" %__name__ 
  
if __name__ == "__main__": 
    print "File1 is being run directly"
else: 
    print "File1 is being imported"




# File2.py 
  
import File1 
  
print "File2 __name__ = %s" %__name__ 
  
if __name__ == "__main__": 
    print "File2 is being run directly"
else: 
    print "File2 is being imported"

Now the interpreter is given the command to run File1.py.
python File1.py
Output :
File1 __name__ = __main__
File1 is being run directly


And then File2.py is run.
python File2.py
Output :
File1 __name__ = File1
File1 is being imported
File2 __name__ = __main__
File2 is being run directly

As seen above, when File1.py is run directly, the interpreter sets the __name__ variable as __main__ and when it is run through File2.py by importing, the __name__ variable is set as the name of the python script, i.e. File1. Thus, it can be said that if __name__ == “__main__” is the part of the program that runs when the script is run from the command line using a command like python File1.py.

This article is contributed by Harshit Agrawal. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.

Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.

#################################
https://runestone.academy/runestone/books/published/thinkcspy/Functions/mainfunction.html
=========
6.8. Using a Main Function

Using functions is a good idea. It helps us to modularize our code by breaking a program into logical parts where each part is responsible for a specific task. For example, in one of our first programs there was a function called drawSquare that was responsible for having some turtle draw a square of some size. The actual turtle and the actual size of the square were defined to be provided as parameters. Here is that original program.

import turtle

def drawSquare(t, sz):
    """Make turtle t draw a square of with side sz."""

    for i in range(4):
        t.forward(sz)
        t.left(90)


wn = turtle.Screen()          # Set up the window and its attributes
wn.bgcolor("lightgreen")

alex = turtle.Turtle()        # create alex
drawSquare(alex, 50)          # Call the function to draw the square

wn.exitonclick()

If you look closely at the structure of this program, you will notice that we first perform all of our necessary import statements, in this case to be able to use the turtle module. Next, we define the function drawSquare. At this point, we could have defined as many functions as were needed. Finally, there are five statements that set up the window, create the turtle, perform the function invocation, and wait for a user click to terminate the program.

These final five statements perform the main processing that the program will do. Notice that much of the detail has been pushed inside the drawSquare function. However, there are still these five lines of code that are needed to get things done.

In many programming languages (e.g. Java and C++), it is not possible to simply have statements sitting alone like this at the bottom of the program. They are required to be part of a special function that is automatically invoked by the operating system when the program is executed. This special function is called main. Although this is not required by the Python programming language, it is actually a good idea that we can incorporate into the logical structure of our program. In other words, these five lines are logically related to one another in that they provide the main tasks that the program will perform. Since functions are designed to allow us to break up a program into logical pieces, it makes sense to call this piece main.

The following activecode shows this idea. In line 11 we have defined a new function called main that doesn’t need any parameters. The five lines of main processing are now placed inside this function. Finally, in order to execute that main processing code, we need to invoke the main function (line 20). When you push run, you will see that the program works the same as it did before.

import turtle

def drawSquare(t, sz):
    """Make turtle t draw a square of with side sz."""

    for i in range(4):
        t.forward(sz)
        t.left(90)


def main():                      # Define the main function
    wn = turtle.Screen()         # Set up the window and its attributes
    wn.bgcolor("lightgreen")

    alex = turtle.Turtle()       # create alex
    drawSquare(alex, 50)         # Call the function to draw the square

    wn.exitonclick()

main()                           # Invoke the main function



Now our program structure is as follows. First, import any modules that will be required. Second, define any functions that will be needed. Third, define a main function that will get the process started. And finally, invoke the main function (which will in turn call the other functions as needed).

Note

In Python there is nothing special about the name main. We could have called this function anything we wanted. We chose main just to be consistent with some of the other languages.

Advanced Topic

Before the Python interpreter executes your program, it defines a few special variables. One of those variables is called __name__ and it is automatically set to the string value "__main__" when the program is being executed by itself in a standalone fashion. On the other hand, if the program is being imported by another program, then the __name__ variable is set to the name of that module. This means that we can know whether the program is being run by itself or whether it is being used by another program and based on that observation, we may or may not choose to execute some of the code that we have written.

For example, assume that we have written a collection of functions to do some simple math. We can include a main function to invoke these math functions. It is much more likely, however, that these functions will be imported by another program for some other purpose. In that case, we would not want to execute our main function.

The activecode below defines two simple functions and a main.


def squareit(n):
    return n * n

def cubeit(n):
    return n*n*n

def main():
    anum = int(input("Please enter a number"))
    print(squareit(anum))
    print(cubeit(anum))

if __name__ == "__main__":
    main()



Line 12 uses an if statement to ask about the value of the __name__ variable. If the value is "__main__", then the main function will be called. Otherwise, it can be assumed that the program is being imported into another program and we do not want to call main because that program will invoke the functions as needed. This ability to conditionally execute our main function can be extremely useful when we are writing code that will potentially be used by others. It allows us to include functionality that the user of the code will not need, most often as part of a testing process to be sure that the functions are working correctly.

Note

In order to conditionally execute the main function, we used a structure called an if statement to create what is known as selection. This topic will be studied in much more detail later.


########################
https://www.guru99.com/learn-python-main-function-with-examples-understand-main.html

Python Main Function with Examples: Understand __main__

Before we jump more into Python coding, we get familiarize with Python Main function and its importance.

Consider the following code

def main():
     print "hello world!"
print "Guru99"

Here we got two pieces of print one is defined within a main function that is "Hello World" and the other is independent which is "Guru99". When you run the function def main ():

    Only "Guru99" prints out
    and not the code "Hello World."



It is because we did not declare the call function "if__name__== "__main__".

    When Python interpreter reads a source file, it will execute all the code found in it.
    When Python runs the "source file" as the main program, it sets the special variable (__name__) to have a value ("__main__").
    When you execute the main function, it will then read the "if" statement and checks whether __name__ does equal to __main__.
    In Python "if__name__== "__main__" allows you to run the Python files either as reusable modules or standalone programs. 

Like C, Python uses == for comparison while = for assignment. Python interpreter uses the main function in two ways

    import: __name__= module's filename

    if statement==false, and the script in __main__ will not be executed



 Main Function with Examples: Understand __main__

Before we jump more into Python coding, we get familiarize with Python Main function and its importance.

Consider the following code

def main():
     print "hello world!"
print "Guru99"

Here we got two pieces of print one is defined within a main function that is "Hello World" and the other is independent which is "Guru99". When you run the function def main ():

    Only "Guru99" prints out
    and not the code "Hello World."

Learn Python Main Function with Examples: Understand __main__

It is because we did not declare the call function "if__name__== "__main__".

    When Python interpreter reads a source file, it will execute all the code found in it.
    When Python runs the "source file" as the main program, it sets the special variable (__name__) to have a value ("__main__").
    When you execute the main function, it will then read the "if" statement and checks whether __name__ does equal to __main__.
    In Python "if__name__== "__main__" allows you to run the Python files either as reusable modules or standalone programs. 

Like C, Python uses == for comparison while = for assignment. Python interpreter uses the main function in two ways

    import: __name__= module's filename

    if statement==false, and the script in __main__ will not be executed
    direct run:__name__=__main__

    if statement == True, and the script in _main_will be executed
    So when the code is executed, it will check for module name with "if."

It is important that after defining the main function, you call the code by if__name__== "__main__" and then run the code, only then you will get the output "hello world!" in the programming console as shown below.

Note: Make sure that after defining a main function, you leave some indent and not declare the code right below the def main(): function otherwise it will give indent error.

def main():
  print("Hello World!")
  
if __name__== "__main__":
  main()

print("Guru99")

Above examples are Python 3 codes, if you want to use Python 2, please consider following code

def main():
  print "Hello World!"
  
if __name__== "__main__":
  main()

print "Guru99"

In Python 3, you do not need to use if__name. Following code also works

def main():
  print("Hello World!")
  
main()
print("Guru99")
